// #include <iostream>
// #include <stdio.h>
// using namespace std;

// int binary_search(int arr[], int n, int key)
// {
//   int s= 0;
//   int e = n-1;

//   while(s<=e)
//   {
//     // int mid = (s+e)/2;
//     // to avoid interger overflow, we'll be using the below format
//     int mid = s+ (e-s)/2;
//     if(arr[mid]==key)
//     {
//       return mid;
//     }
//     else if(arr[mid]>key)
//     {
//       e = mid - 1;
//     }
//     else
//     {
//       s = mid + 1;
//     }
//   }
//   return -1;
// }

// int main() {
//   int arr[] = {1,4,5,6,7,9};
//   int n= sizeof(arr)/sizeof(int);
//   int key;
//   cout<<"Enter the no. whose position you would like to find:"<<endl;
//   cin>>key;

//   int ans = binary_search(arr,n,key);

//   if(ans == -1)
//   {
//     cout<< "Sorry! Index doesn't found."<<endl;
//   }
//   else
//   {
//   cout<< "The position of the key is found at:" << ans<< endl;
//   }
//   return 0;
// }

// Using STL Function

#include <algorithm>
#include <iostream>
#include <stdio.h>
#include <vector>
using namespace std;

int main() {
  vector<int> v{1, 2, 3, 4, 5, 6, 7, 8};
  if (binary_search(v.begin(), v.end(), 7)) {
    cout << "Found!" << endl;
  } else {
    cout << "Not Found!" << endl;
  }
  return 0;
}


// Time Complexity

// T(0)= O(logn)